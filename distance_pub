import rclpy
from rclpy.node import Node
from std_msgs.msg import Float32
from kamera_logic import Kamera  # Import Kamera class here

class MinimalDistancePublisher(Node):

    def __init__(self):
        super().__init__('distance_publisher')
        self.publisher_ = self.create_publisher(Float32, 'distance_topic', 10)
        self.kamera = Kamera()  # Initialize the Kamera class

        timer_period = 0.2  # Publishes data every 0.2 seconds (5Hz)
        self.timer = self.create_timer(timer_period, self.timer_callback)

    def timer_callback(self):
        distance = self.kamera.last_detected_distance #use the last calculated distance
        if distance is not None:
            msg = Float32() 
            msg.data = float(distance)
            self.publisher_.publish(msg)
            self.get_logger().info('Publishing distance: "%s"' % msg.data)# publish the data

def main(args=None):
    rclpy.init(args=args)
    minimal_publisher = MinimalDistancePublisher()
    rclpy.spin(minimal_publisher)
    minimal_publisher.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
